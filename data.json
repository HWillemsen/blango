[{"model": "blog.comment", "pk": 1, "fields": {"creator": 1, "content": "What a great post!", "content_type": 8, "object_id": 1, "created_at": "2022-02-01T17:23:25.157Z", "modified_at": "2022-02-01T17:23:25.189Z"}}, {"model": "blog.comment", "pk": 2, "fields": {"creator": 1, "content": "I like myself!", "content_type": 4, "object_id": 1, "created_at": "2022-02-01T17:23:25.157Z", "modified_at": "2022-02-01T17:23:25.189Z"}}, {"model": "blog.comment", "pk": 3, "fields": {"creator": 1, "content": "Way to go", "content_type": 8, "object_id": 1, "created_at": "2022-02-02T19:56:42.471Z", "modified_at": "2022-02-02T19:56:42.471Z"}}, {"model": "blog.comment", "pk": 4, "fields": {"creator": 1, "content": "First comment great post!", "content_type": 8, "object_id": 2, "created_at": "2022-02-02T20:12:16.233Z", "modified_at": "2022-02-02T20:12:16.233Z"}}, {"model": "blog.comment", "pk": 5, "fields": {"creator": 1, "content": "Makes sense!", "content_type": 8, "object_id": 2, "created_at": "2022-02-07T17:01:27.219Z", "modified_at": "2022-02-07T17:01:27.219Z"}}, {"model": "blog.comment", "pk": 6, "fields": {"creator": 1, "content": "Go ahead with the template tag!", "content_type": 8, "object_id": 3, "created_at": "2022-02-07T17:05:51.259Z", "modified_at": "2022-02-07T17:05:51.260Z"}}, {"model": "blog.tag", "pk": 1, "fields": {"value": "Django"}}, {"model": "blog.tag", "pk": 2, "fields": {"value": "Python"}}, {"model": "blog.tag", "pk": 3, "fields": {"value": "Codio"}}, {"model": "blog.post", "pk": 1, "fields": {"author": 1, "created_at": "2022-01-31T17:30:42.166Z", "modified_at": "2022-01-31T17:30:42.166Z", "published_at": "2022-01-31T17:28:25Z", "title": "An Example Post", "slug": "an-example-post", "summary": "A short example post", "content": "<h3>An example post!</h3>\r\n<p>This is an example post, that uses HTML to render itself.</p>", "tags": [1, 2, 3]}}, {"model": "blog.post", "pk": 2, "fields": {"author": 2, "created_at": "2022-02-01T19:57:22.862Z", "modified_at": "2022-02-01T19:57:22.862Z", "published_at": "2022-02-01T19:56:44Z", "title": "This is another post created", "slug": "this-is-another-post-created", "summary": "Another post to demonstrate everythings", "content": "Another post to demonstrate everythingsAnother post to demonstrate everythingsAnother post to demonstrate everythingsAnother post to demonstrate everythings", "tags": [1, 3]}}, {"model": "blog.post", "pk": 3, "fields": {"author": 3, "created_at": "2022-02-02T19:12:41.445Z", "modified_at": "2022-02-02T19:12:41.446Z", "published_at": "2022-02-02T19:11:55Z", "title": "This is a new post", "slug": "this-is-a-new-post", "summary": "Finally the template tag needs to be used in the post-detail.html template. Create a new row and column at the bottom of the page, and then add your new template tag inside. Remember to pass in the current Post.", "content": "Finally the template tag needs to be used in the post-detail.html template. Create a new row and column at the bottom of the page, and then add your new template tag inside. Remember to pass in the current Post.Finally the template tag needs to be used in the post-detail.html template. Create a new row and column at the bottom of the page, and then add your new template tag inside. Remember to pass in the current Post.", "tags": [1]}}, {"model": "blog.post", "pk": 4, "fields": {"author": 1, "created_at": "2022-02-02T19:13:33.110Z", "modified_at": "2022-02-02T19:13:33.110Z", "published_at": "2022-02-02T19:12:46Z", "title": "Yet another post", "slug": "yet-another-post", "summary": "The Django template language: for Python programmers", "content": "his document explains the Django template system from a technical perspective – how it works and how to extend it. If you’re looking for reference on the language syntax, see The Django template language.\r\n\r\nIt assumes an understanding of templates, contexts, variables, tags, and rendering. Start with the introduction to the Django template language if you aren’t familiar with these concepts.\r\n\r\nOverview¶\r\nUsing the template system in Python is a three-step process:\r\n\r\nYou configure an Engine.\r\nYou compile template code into a Template.\r\nYou render the template with a Context.\r\nDjango projects generally rely on the high level, backend agnostic APIs for each of these steps instead of the template system’s lower level APIs:\r\n\r\nFor each DjangoTemplates backend in the TEMPLATES setting, Django instantiates an Engine. DjangoTemplates wraps Engine and adapts it to the common template backend API.\r\nThe django.template.loader module provides functions such as get_template() for loading templates. They return a django.template.backends.django.Template which wraps the actual django.template.Template.\r\nThe Template obtained in the previous step has a render() method which marshals a context and possibly a request into a Context and delegates the rendering to the underlying Template.", "tags": [1]}}, {"model": "blog.post", "pk": 5, "fields": {"author": 2, "created_at": "2022-02-02T19:14:18.281Z", "modified_at": "2022-02-02T19:14:18.281Z", "published_at": "2022-02-02T19:13:38Z", "title": "Not the last post yet", "slug": "not-the-last-post-yet", "summary": "Configuring an engine", "content": "If you are using the DjangoTemplates backend, this probably isn’t the documentation you’re looking for. An instance of the Engine class described below is accessible using the engine attribute of that backend and any attribute defaults mentioned below are overridden by what’s passed by DjangoTemplates.\r\n\r\nclass Engine(dirs=None, app_dirs=False, context_processors=None, debug=False, loaders=None, string_if_invalid='', file_charset='utf-8', libraries=None, builtins=None, autoescape=True)¶\r\nWhen instantiating an Engine all arguments must be passed as keyword arguments:\r\n\r\ndirs is a list of directories where the engine should look for template source files. It is used to configure filesystem.Loader.\r\n\r\nIt defaults to an empty list.\r\n\r\napp_dirs only affects the default value of loaders. See below.\r\n\r\nIt defaults to False.\r\n\r\nautoescape controls whether HTML autoescaping is enabled.\r\n\r\nIt defaults to True.", "tags": [2]}}, {"model": "blog.post", "pk": 6, "fields": {"author": 3, "created_at": "2022-02-02T19:14:57.727Z", "modified_at": "2022-02-02T19:14:57.727Z", "published_at": "2022-02-02T19:14:26Z", "title": "The last post", "slug": "the-last-post", "summary": "Loading a template", "content": "The recommended way to create a Template is by calling the factory methods of the Engine: get_template(), select_template() and from_string().\r\n\r\nIn a Django project where the TEMPLATES setting defines a DjangoTemplates engine, it’s possible to instantiate a Template directly. If more than one DjangoTemplates engine is defined, the first one will be used.\r\n\r\nclass Template¶\r\nThis class lives at django.template.Template. The constructor takes one argument — the raw template code:", "tags": [1, 2, 3]}}, {"model": "blango_auth.User", "pk": 1, "fields": {"password": "argon2$argon2id$v=19$m=102400,t=2,p=8$QmZmZ3o0RzhHZFVuWERSM25XaFRsOA$gp56mBETKkWkamcIyXq6Cg", "last_login": "2022-02-08T18:40:53.914Z", "is_superuser": true, "username": "codio", "first_name": "", "last_name": "", "email": "hwillemsen@zonnet.nl", "is_staff": true, "is_active": true, "date_joined": "2022-01-31T17:10:53.743Z", "groups": [], "user_permissions": []}}, {"model": "blango_auth.User", "pk": 2, "fields": {"password": "pbkdf2_sha256$260000$Ox5aDW3EWI70BOTmncK0nS$XFUDkon/q5MDgYOXVhIcNYl2JeL1A/U5hXRRlK1ejs4=", "last_login": null, "is_superuser": true, "username": "fred", "first_name": "Fred", "last_name": "<a href=\"#\">Awesome<a>", "email": "hwillemsen@zonnet.nl", "is_staff": true, "is_active": true, "date_joined": "2022-02-01T19:56:03Z", "groups": [], "user_permissions": []}}, {"model": "blango_auth.User", "pk": 3, "fields": {"password": "pbkdf2_sha256$260000$2sGIud1wDEGz0U1pKR85tp$QeR/FZmJQtQbX0H3yAuXLV89mYGfQDEVOTyEPe5av18=", "last_login": null, "is_superuser": false, "username": "Tim", "first_name": "Timoty", "last_name": "Doyle", "email": "tdoyle@example.com", "is_staff": false, "is_active": true, "date_joined": "2022-02-02T19:11:13Z", "groups": [], "user_permissions": []}}]